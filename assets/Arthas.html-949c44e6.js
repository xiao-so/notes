import{_ as r,r as l,o as d,c as o,a as e,b as a,d as s,e as n}from"./app-9157d7b3.js";const i={},c=n('<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p>Arthas 是一款线上监控诊断产品，能够实时查看 load、内存、gc、线程的状态信息</p><h2 id="快速开始" tabindex="-1"><a class="header-anchor" href="#快速开始" aria-hidden="true">#</a> 快速开始</h2><h3 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h3>',4),h={href:"https://arthas.aliyun.com/download/latest_version?mirror=aliyun",target:"_blank",rel:"noopener noreferrer"},p=n(`<h3 id="启动" tabindex="-1"><a class="header-anchor" href="#启动" aria-hidden="true">#</a> 启动</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">java</span> <span class="token parameter variable">-jar</span> arthas-boot.jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>随后可以看到 Java进程列表，输入ID按下Enter进入arthas控制台</p><h2 id="命令使用" tabindex="-1"><a class="header-anchor" href="#命令使用" aria-hidden="true">#</a> 命令使用</h2><h3 id="记录" tabindex="-1"><a class="header-anchor" href="#记录" aria-hidden="true">#</a> 记录</h3><h4 id="jfr" tabindex="-1"><a class="header-anchor" href="#jfr" aria-hidden="true">#</a> jfr</h4><div class="custom-container tip"><p class="custom-container-title">什么是 JFR</p><p>Java Flight Recorder (JFR) 是一种用于收集有关正在运行的 Java 应用程序的诊断和分析数据的工具。它集成到 Java 虚拟机 (JVM) 中，几乎不会造成性能开销，因此即使在负载较重的生产环境中也可以使用。 JDK8 的 8u262 版本之后才支持 jfr。</p></div><p><code>jfr</code> 命令支持在程序动态运行过程中开启和关闭 JFR 记录。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>jfr <span class="token operator">&lt;</span>cmd命令<span class="token operator">&gt;</span> <span class="token punctuation">[</span>actionArg<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th style="text-align:left;">参数名称</th><th style="text-align:left;">参数说明</th></tr></thead><tbody><tr><td style="text-align:left;">cmd</td><td style="text-align:left;">要执行的操作 支持的命令【start，status，dump，stop】</td></tr><tr><td style="text-align:left;">actionArg</td><td style="text-align:left;">属性名模式</td></tr><tr><td style="text-align:left;"><code>-i &lt;record name&gt;</code></td><td style="text-align:left;">记录名称</td></tr><tr><td style="text-align:left;"><code>-r &lt;record id&gt;</code></td><td style="text-align:left;">记录 id 值</td></tr><tr><td style="text-align:left;"><code>--dumponexit &lt;文件名.jfr&gt;</code></td><td style="text-align:left;">程序退出时，是否要 dump 出 .jfr 文件，默认为 false</td></tr><tr><td style="text-align:left;"><code>-d &lt;时间&gt;</code></td><td style="text-align:left;">延迟多久后启动 JFR 记录，支持带单位配置，eg: 60s, 2m, 5h, 3d. 不带单位就是秒，默认无延迟</td></tr><tr><td style="text-align:left;"><code>--duration &lt;持续时间&gt;</code></td><td style="text-align:left;">JFR 记录持续时间，支持单位配置，不带单位就是秒，默认一直记录</td></tr><tr><td style="text-align:left;"><code>-s &lt;配置文件地址&gt;</code></td><td style="text-align:left;">采集 Event 的详细配置文件，默认是 default.jfc 位于 <code>$JAVA_HOME/lib/jfr/default.jfc</code></td></tr><tr><td style="text-align:left;"><code>-f &lt;输出文件地址&gt;</code></td><td style="text-align:left;">将输出转储到指定路径</td></tr><tr><td style="text-align:left;"><code>--maxage &lt;时间值&gt;</code></td><td style="text-align:left;">缓冲区数据最大文件记录保存时间，支持单位配置，不带单位就是秒，默认是不限制</td></tr><tr><td style="text-align:left;"><code>--maxsize &lt;大小&gt;</code></td><td style="text-align:left;">缓冲区的最大文件大小，8支持单位配置， 不带单位是字节，m 或者 M 代表 MB，g 或者 G 代表 GB。</td></tr><tr><td style="text-align:left;"><code>--state &lt;状态值&gt;</code></td><td style="text-align:left;">jfr 记录状态，可以是 new, delay, running, stopped, closed</td></tr></tbody></table><h3 id="jvm相关" tabindex="-1"><a class="header-anchor" href="#jvm相关" aria-hidden="true">#</a> JVM相关</h3><h4 id="dashboard" tabindex="-1"><a class="header-anchor" href="#dashboard" aria-hidden="true">#</a> dashboard</h4>`,12),u={href:"https://arthas.aliyun.com/doc/dashboard.html",target:"_blank",rel:"noopener noreferrer"},g=n(`<p>使用 dashboard 命令，可以显示当前进程的线程、内存等信息，按 ctrl+c 退出。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>dashboard <span class="token parameter variable">-i</span> <span class="token number">1000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th style="text-align:left;">参数</th><th style="text-align:left;">参数说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>-i &lt;时间间隔&gt;</code></td><td style="text-align:left;">刷新实时数据的时间间隔 (ms)，默认 5000ms</td></tr><tr><td style="text-align:left;"><code>-n &lt;次数&gt;</code></td><td style="text-align:left;">刷新实时数据的次数</td></tr></tbody></table><h4 id="thread" tabindex="-1"><a class="header-anchor" href="#thread" aria-hidden="true">#</a> thread</h4><p>查看当前线程信息，查看线程的堆栈</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>thread <span class="token operator">&lt;</span>线程id<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th style="text-align:left;">参数名称</th><th style="text-align:left;">参数说明</th></tr></thead><tbody><tr><td style="text-align:left;"><em>id</em></td><td style="text-align:left;">线程 id</td></tr><tr><td style="text-align:left;"><code>-n &lt;数量&gt;</code></td><td style="text-align:left;">指定最忙的前 N 个线程并打印堆栈</td></tr><tr><td style="text-align:left;">-b</td><td style="text-align:left;">找出当前阻塞其他线程的线程</td></tr><tr><td style="text-align:left;"><code>-i &lt;采样间隔&gt;</code></td><td style="text-align:left;">指定 cpu 使用率统计的采样间隔，单位为毫秒，默认值为 200</td></tr><tr><td style="text-align:left;">--all</td><td style="text-align:left;">显示所有匹配的线程</td></tr></tbody></table><h4 id="jvm" tabindex="-1"><a class="header-anchor" href="#jvm" aria-hidden="true">#</a> jvm</h4><p>查看当前 JVM 信息</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>jvm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="memory" tabindex="-1"><a class="header-anchor" href="#memory" aria-hidden="true">#</a> memory</h4><p>查看当前内存信息</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>memory
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="heapdump" tabindex="-1"><a class="header-anchor" href="#heapdump" aria-hidden="true">#</a> heapdump</h4><p>dump java heap，类似 jmap 命令的 heap dump 功能</p><p><strong>dump 到指定文件</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>heapdump /tmp/dump.hprof
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>dump live 对象</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>heapdump <span class="token parameter variable">--live</span> /tmp/dump.hprof
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="sysprop" tabindex="-1"><a class="header-anchor" href="#sysprop" aria-hidden="true">#</a> sysprop</h4><p>查看和修改当前 JVM 的系统属性(<code>System Property</code>)</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sysprop <span class="token punctuation">[</span>-h<span class="token punctuation">]</span> <span class="token punctuation">[</span>property-name<span class="token punctuation">]</span> <span class="token punctuation">[</span>property-value<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>查看所有属性</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sysprop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>查看单个属性</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sysprop <span class="token operator">&lt;</span>属性名<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例： <code>sysprop java.version</code></p><p><strong>修改单个属性</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sysprop <span class="token operator">&lt;</span>属性名<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>属性值<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例：<code>sysprop user.country CN</code></p><h4 id="logger" tabindex="-1"><a class="header-anchor" href="#logger" aria-hidden="true">#</a> logger</h4><p>用于查看 logger 信息，更新 logger level，支持常见 logger</p>`,32),m={href:"https://arthas.aliyun.com/doc/logger.html",target:"_blank",rel:"noopener noreferrer"},b=n(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>logger <span class="token punctuation">[</span>-c <span class="token operator">&lt;</span>value<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>--classLoaderClass <span class="token operator">&lt;</span>value<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>-h<span class="token punctuation">]</span> <span class="token punctuation">[</span>--include-no-appender<span class="token punctuation">]</span> <span class="token punctuation">[</span>-l <span class="token operator">&lt;</span>value<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>-n <span class="token operator">&lt;</span>value<span class="token operator">&gt;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>-c &lt;值&gt;</code></td><td>指定 classLoader 的 hashcode，默认是SystemClassLoader</td></tr><tr><td><code>--classLoaderClass &lt;类全类名&gt;</code></td><td>对于只有唯一实例的 ClassLoader 可以通过<code>--classLoaderClass</code>指定 class name</td></tr><tr><td><code>-l &lt;日志等级&gt;</code></td><td>用于设置日志等级</td></tr><tr><td><code>-n &lt;logger名&gt;</code></td><td>指定要操作的 logger</td></tr></tbody></table><h4 id="vmoption" tabindex="-1"><a class="header-anchor" href="#vmoption" aria-hidden="true">#</a> vmoption</h4><p>查看和修改 JVM 里诊断相关的 option</p><p>查看所有指定的 option</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>vmoption
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看指定的 option</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>vmoption <span class="token operator">&lt;</span>option名<span class="token operator">&gt;</span>
例: vmoption PrintGC
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>更新指定的 option</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>vmoption PrintGC <span class="token boolean">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="vmtool" tabindex="-1"><a class="header-anchor" href="#vmtool" aria-hidden="true">#</a> vmtool</h4><p><code>vmtool</code> 利用<code>JVMTI</code>接口，实现查询内存对象，强制 GC 等功能。</p><p>强制 gc</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>vmtool <span class="token parameter variable">--action</span> forceGc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="monitor-watch-trace-相关" tabindex="-1"><a class="header-anchor" href="#monitor-watch-trace-相关" aria-hidden="true">#</a> monitor/watch/trace 相关</h3><p>去官网看看吧</p>`,16),v={href:"https://arthas.aliyun.com/doc/monitor.html",target:"_blank",rel:"noopener noreferrer"},f={href:"https://arthas.aliyun.com/doc/stack.html",target:"_blank",rel:"noopener noreferrer"},y={href:"https://arthas.aliyun.com/doc/trace.html",target:"_blank",rel:"noopener noreferrer"},x={href:"https://arthas.aliyun.com/doc/tt.html",target:"_blank",rel:"noopener noreferrer"},_={href:"https://arthas.aliyun.com/doc/watch.html",target:"_blank",rel:"noopener noreferrer"},k=e("h3",{id:"class-classloader",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#class-classloader","aria-hidden":"true"},"#"),a(" class/classloader")],-1),j=e("p",null,"去官网看看吧",-1),J={href:"https://arthas.aliyun.com/doc/classloader.html",target:"_blank",rel:"noopener noreferrer"},V={href:"https://arthas.aliyun.com/doc/dump.html",target:"_blank",rel:"noopener noreferrer"},M={href:"https://arthas.aliyun.com/doc/jad.html",target:"_blank",rel:"noopener noreferrer"},C={href:"https://arthas.aliyun.com/doc/mc.html",target:"_blank",rel:"noopener noreferrer"},L=e("code",null,".java",-1),w=e("code",null,".class",-1),A={href:"https://arthas.aliyun.com/doc/redefine.html",target:"_blank",rel:"noopener noreferrer"},R=e("code",null,".class",-1),E={href:"https://arthas.aliyun.com/doc/retransform.html",target:"_blank",rel:"noopener noreferrer"},F=e("code",null,".class",-1),G={href:"https://arthas.aliyun.com/doc/sc.html",target:"_blank",rel:"noopener noreferrer"},N={href:"https://arthas.aliyun.com/doc/sm.html",target:"_blank",rel:"noopener noreferrer"},B=e("h2",{id:"参考",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#参考","aria-hidden":"true"},"#"),a(" 参考")],-1),I={href:"https://arthas.aliyun.com/doc/",target:"_blank",rel:"noopener noreferrer"};function P(S,D){const t=l("ExternalLinkIcon");return d(),o("div",null,[c,e("p",null,[a("全量安装包下载："),e("a",h,[a("arthas"),s(t)])]),p,e("p",null,[a("详细参考："),e("a",u,[a("dashboard | arthas (aliyun.com)"),s(t)])]),g,e("p",null,[a("使用参考："),e("a",m,[a("logger | arthas (aliyun.com)"),s(t)])]),b,e("ul",null,[e("li",null,[e("a",v,[a("monitor"),s(t)]),a(" - 方法执行监控")]),e("li",null,[e("a",f,[a("stack"),s(t)]),a(" - 输出当前方法被调用的调用路径")]),e("li",null,[e("a",y,[a("trace"),s(t)]),a(" - 方法内部调用路径，并输出方法路径上的每个节点上耗时")]),e("li",null,[e("a",x,[a("tt"),s(t)]),a(" - 方法执行数据的时空隧道，记录下指定方法每次调用的入参和返回信息，并能对这些不同的时间下调用进行观测")]),e("li",null,[e("a",_,[a("watch"),s(t)]),a(" - 方法执行数据观测")])]),k,j,e("ul",null,[e("li",null,[e("a",J,[a("classloader"),s(t)]),a(" - 查看 classloader 的继承树，urls，类加载信息，使用 classloader 去 getResource")]),e("li",null,[e("a",V,[a("dump"),s(t)]),a(" - dump 已加载类的 byte code 到特定目录")]),e("li",null,[e("a",M,[a("jad"),s(t)]),a(" - 反编译指定已加载类的源码")]),e("li",null,[e("a",C,[a("mc"),s(t)]),a(" - 内存编译器，内存编译"),L,a("文件为"),w,a("文件")]),e("li",null,[e("a",A,[a("redefine"),s(t)]),a(" - 加载外部的"),R,a("文件，redefine 到 JVM 里")]),e("li",null,[e("a",E,[a("retransform"),s(t)]),a(" - 加载外部的"),F,a("文件，retransform 到 JVM 里")]),e("li",null,[e("a",G,[a("sc"),s(t)]),a(" - 查看 JVM 已加载的类信息")]),e("li",null,[e("a",N,[a("sm"),s(t)]),a(" - 查看已加载类的方法信息")])]),B,e("p",null,[e("a",I,[a("简介 | arthas (aliyun.com)"),s(t)])])])}const z=r(i,[["render",P],["__file","Arthas.html.vue"]]);export{z as default};
