import{_ as p,r as i,o,c,a as n,b as s,d as t,e as a}from"./app-9157d7b3.js";const l={},u=a('<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p>Go 是一种由 Google 开发的编程语言，具有静态类型、高效、可移植性强等特点，适用于开发网络应用、分布式系统、云计算等领域。它支持并发编程、自动垃圾回收等特性，代码简洁易懂，易于维护和扩展。</p><h2 id="快速上手" tabindex="-1"><a class="header-anchor" href="#快速上手" aria-hidden="true">#</a> 快速上手</h2><h3 id="下载安装" tabindex="-1"><a class="header-anchor" href="#下载安装" aria-hidden="true">#</a> 下载安装</h3><p>官网下载：https://golang.google.cn/dl/</p><h3 id="配置环境" tabindex="-1"><a class="header-anchor" href="#配置环境" aria-hidden="true">#</a> 配置环境</h3><p>配置环境，使用模块和代理</p>',7),d={href:"https://goproxy.cn/",target:"_blank",rel:"noopener noreferrer"},r=a(`<p>Windows PowerShell 下配置：</p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code><span class="token variable">$env</span>:GO111MODULE = <span class="token string">&quot;on&quot;</span>
<span class="token variable">$env</span>:GOPROXY = <span class="token string">&quot;https://goproxy.cn&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="安装-git" tabindex="-1"><a class="header-anchor" href="#安装-git" aria-hidden="true">#</a> 安装 Git</h3>`,3),k={href:"https://git-scm.com/downloads",target:"_blank",rel:"noopener noreferrer"},v=a(`<h3 id="第一个程序-hello" tabindex="-1"><a class="header-anchor" href="#第一个程序-hello" aria-hidden="true">#</a> 第一个程序 hello</h3><p>新建 go.mod</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>module goland_learn
<span class="token keyword">go</span> <span class="token number">1.20</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>新建 hello.go</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译构建</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">go</span> build <span class="token punctuation">.</span>\\hello<span class="token punctuation">.</span><span class="token keyword">go</span>
或者
<span class="token keyword">go</span> build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行可执行文件</p><h2 id="常用说明" tabindex="-1"><a class="header-anchor" href="#常用说明" aria-hidden="true">#</a> 常用说明</h2><p>go 项目管理工具：</p><ul><li><p>GOPATH：保存了应用自身的代码和第三方依赖的代码，需要设置 GOPATH 到本地的某个目录，已废弃</p></li><li><p>GO Module：推荐的项目方式</p></li></ul><p>包：文件夹，一个包会有多个模块或者子包</p><p>模块：.go 源文件</p><h2 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令" aria-hidden="true">#</a> 常用命令</h2><p>构建</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">go</span> build xxx<span class="token punctuation">.</span><span class="token keyword">go</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>编译并运行</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>go run xxx.go
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运行测试</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>go test
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>清除对象</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>go clean
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>帮助</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>go help
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>打印运行环境</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>go env
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下载并安装包和依赖</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>go get 包
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>编译并安装包和依赖</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>go install
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用 module 方式初始化项目,会生成 go.mod 文件</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>go mod init 项目名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="规范" tabindex="-1"><a class="header-anchor" href="#规范" aria-hidden="true">#</a> 规范</h2><h3 id="命名规范" tabindex="-1"><a class="header-anchor" href="#命名规范" aria-hidden="true">#</a> 命名规范</h3><p>变量、常量、全局函数、结构、接口、方法</p><ol><li>需要对外暴露的（public），以大写字母开头</li><li>不需要对外暴露的，以小写字母开头</li></ol><h4 id="包命名" tabindex="-1"><a class="header-anchor" href="#包命名" aria-hidden="true">#</a> 包命名</h4><ol><li>package 和目录名保持一致，应该只含小写</li></ol><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> dao
<span class="token keyword">package</span> service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="文件命名" tabindex="-1"><a class="header-anchor" href="#文件命名" aria-hidden="true">#</a> 文件命名</h4><ol><li>小写单词，并以下划线分割</li></ol><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>customer_dao<span class="token punctuation">.</span><span class="token keyword">go</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="结构体命名" tabindex="-1"><a class="header-anchor" href="#结构体命名" aria-hidden="true">#</a> 结构体命名</h4><p>驼峰命名，首字母根据访问控制大写或小写</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> CustomerOrder <span class="token keyword">struct</span><span class="token punctuation">{</span>
    Name <span class="token builtin">string</span>
    Address <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="接口命名" tabindex="-1"><a class="header-anchor" href="#接口命名" aria-hidden="true">#</a> 接口命名</h4><p>驼峰命名，首字母根据访问控制大写或小写</p><p>单个函数的结构名以 <code>er</code> 作为后缀</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Reader <span class="token keyword">interface</span><span class="token punctuation">{</span>
    <span class="token function">Read</span><span class="token punctuation">(</span>p <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span>err <span class="token builtin">error</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="变量命名" tabindex="-1"><a class="header-anchor" href="#变量命名" aria-hidden="true">#</a> 变量命名</h4><p>驼峰命名，首字母根据访问控制大写或小写，如果是 bool 类型，以<code>Has/has</code>、<code>is/Is</code>、<code>can/Can</code>、<code>Allow/allow</code>开头</p><h3 id="单元测试" tabindex="-1"><a class="header-anchor" href="#单元测试" aria-hidden="true">#</a> 单元测试</h3><p>单元测试命名规范为 <code>example_test.go</code>，函数名以 <code>Test</code> 开头</p><h3 id="错误处理" tabindex="-1"><a class="header-anchor" href="#错误处理" aria-hidden="true">#</a> 错误处理</h3><p>以上内容概括了以下错误处理的原则：</p><ol><li>不要丢弃任何有返回错误的调用，必须全部处理。不要使用 <code>_</code> 来忽略错误。</li><li>接收到错误时，要么返回错误，要么使用日志记录下来，并尽早返回。尽量不要使用 <code>panic</code>，除非你知道你在做什么。</li><li>错误描述如果是英文，必须为小写，不需要标点结尾。</li><li>采用独立的错误流进行处理，而不要将错误信息与正常输出混在一起</li></ol><h2 id="语法" tabindex="-1"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法</h2><h3 id="标识符规则" tabindex="-1"><a class="header-anchor" href="#标识符规则" aria-hidden="true">#</a> 标识符规则</h3><ol><li>标识符由数字、字母和下划线<code>_</code>组成</li><li>只能以字母和下划线<code>_</code>开头</li><li>标识符区分大小写</li></ol><h3 id="变量" tabindex="-1"><a class="header-anchor" href="#变量" aria-hidden="true">#</a> 变量</h3><p>变量定义语法，go 的变量声明后必须使用</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> 变量名 <span class="token keyword">type</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> name <span class="token builtin">string</span>
<span class="token keyword">var</span> age <span class="token builtin">int</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>批量声明</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span><span class="token punctuation">(</span>
    name <span class="token builtin">string</span>
    age <span class="token builtin">int</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类型推断根据初始化值省略类型</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&quot;aaa&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>短变量声明</p><p>只能用在函数内部</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>name <span class="token operator">:=</span> <span class="token string">&quot;myName&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>匿名变量 如果接受到多个变量，有一些变量使用不到，可以用 <code>_</code>表示变量名</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">getNameAndAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token string">&quot;xiaoso&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	name<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> <span class="token function">getNameAndAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;name:%v\\n&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="常量" tabindex="-1"><a class="header-anchor" href="#常量" aria-hidden="true">#</a> 常量</h3><p>定义常量</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">const</span> 常量名 <span class="token punctuation">[</span>类型 <span class="token punctuation">]</span> <span class="token operator">=</span> value
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">const</span> PI <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">3.14</span>
<span class="token keyword">const</span> <span class="token punctuation">(</span>
    width  <span class="token operator">=</span> <span class="token number">100</span>
    height <span class="token operator">=</span> <span class="token number">200</span>
<span class="token punctuation">)</span>
<span class="token keyword">const</span> i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可被编译器修改的常量 <code>itoa</code></p><p>默认是 0，每调用一次加 1，遇到 const 关键字被重置为 0，可以使用 <code>_</code>跳过某些值，如果遇到其他变量声明，也是跳过某些值</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">const</span><span class="token punctuation">(</span>
	a1 <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token comment">//0 </span>
    a2 <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token comment">//1</span>
    <span class="token boolean">_</span>
    a3 <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token comment">//3</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h3><p>变量类型</p><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>bool</td><td>布尔类型，true 或 false</td></tr><tr><td>string</td><td>字符串类型，表示一串字符</td></tr><tr><td>int</td><td>有符号整型，表示整数，在 32 位和 64 位系统取对应长度</td></tr><tr><td>uint</td><td>无符号整型，表示非负整数</td></tr><tr><td>uintptr</td><td>无符号整型，用于存储指针地址</td></tr><tr><td>byte</td><td>无符号整型，表示字符类型的单个字节，等同于 uint8</td></tr><tr><td>rune</td><td>整型，表示 Unicode 码点，等同于 int32</td></tr><tr><td>float32</td><td>单精度浮点数</td></tr><tr><td>float64</td><td>双精度浮点数</td></tr><tr><td>complex64</td><td>包含两个 32 位浮点数的复数类型</td></tr><tr><td>complex128</td><td>包含两个 64 位浮点数的复数类型</td></tr><tr><td>array</td><td>固定长度数组，包含相同类型的元素</td></tr><tr><td>slice</td><td>动态长度数组，可以动态添加元素</td></tr><tr><td>map</td><td>键值对集合，用于存储无序数据</td></tr><tr><td>struct</td><td>结构体，可以存储不同类型的字段</td></tr><tr><td>interface</td><td>接口类型，表示方法的集合</td></tr><tr><td>func</td><td>函数类型，可以作为函数参数和返回值类型</td></tr><tr><td>channel</td><td>通道类型，用于协程间通信</td></tr></tbody></table><p>注意：uintptr 类型一般不应该直接使用，除非需要和指针相关的操作。在使用指针时，应该优先考虑使用指针类型，而不是 uintptr 类型。</p><p>int 取决于操作系统长度，如果要操作系统无关，可以使用类似如下</p><ul><li>int8、int16、int32、int64</li><li>uint8、uint16、uint32、uint64</li></ul><p>定义数组</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="切片" tabindex="-1"><a class="header-anchor" href="#切片" aria-hidden="true">#</a> 切片</h3><p>切片就是动态数组</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>a := []int {1,2,3}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>a <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="map" tabindex="-1"><a class="header-anchor" href="#map" aria-hidden="true">#</a> Map</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>m1 <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">// 或 make(map[string]string)</span>
m1<span class="token punctuation">[</span><span class="token string">&quot;key1&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;value1&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>遍历</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> m1 <span class="token punctuation">{</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;key:%v value:%v&quot;</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h3><p>函数可以有多个返回值</p><p>函数分为普通函数、匿名函数、方法（结构体中定义的函数）</p><p>函数返回值可以命名</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">sum</span><span class="token punctuation">(</span>a <span class="token builtin">int</span><span class="token punctuation">,</span>b <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>ret <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    ret <span class="token operator">=</span> a<span class="token operator">+</span>b
    <span class="token keyword">return</span> ret
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>变长参数</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">sum</span><span class="token punctuation">(</span>args <span class="token operator">...</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数可以作为一个类型</p><p>如下定义了一个叫 fun 的函数类型，接受 2 个入参，1 和返回值</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> fun <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">int</span> <span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span>
<span class="token keyword">func</span> <span class="token function">get1</span><span class="token punctuation">(</span>a <span class="token builtin">int</span><span class="token punctuation">,</span>b <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">1</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">get2</span><span class="token punctuation">(</span>a <span class="token builtin">int</span><span class="token punctuation">,</span>b <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">2</span>
<span class="token punctuation">}</span>
<span class="token comment">// 定义一个函数指向 get1 函数</span>
<span class="token keyword">var</span> f fun <span class="token operator">=</span> get1


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数可以作为一个参数</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">sayHello</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello %s&quot;</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">f1</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> f <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">f</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">f1</span><span class="token punctuation">(</span><span class="token string">&quot;tom&quot;</span><span class="token punctuation">,</span>sayHello<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数可以作为返回值</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">cal</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token punctuation">{</span>
    <span class="token comment">// 省略</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>匿名函数</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    max <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>a <span class="token builtin">int</span><span class="token punctuation">,</span>b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span> a <span class="token operator">&gt;</span> b<span class="token punctuation">{</span>
            <span class="token keyword">return</span> a
        <span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> b
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="闭包" tabindex="-1"><a class="header-anchor" href="#闭包" aria-hidden="true">#</a> 闭包</h3><p>闭包：定义在一个函数内部的函数</p><p>个人理解：可以直接当成一个类用，x 就是类实例变量，调用 add 方法时，就生成一个实例</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> x <span class="token builtin">int</span>
	<span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
		x <span class="token operator">+=</span> y
		<span class="token keyword">return</span> x
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 10</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 30</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 60</span>
	f1 <span class="token operator">:=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 40</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 90</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="方法" tabindex="-1"><a class="header-anchor" href="#方法" aria-hidden="true">#</a> 方法</h3><p>Go 中的方法，是一种特殊的函数，定义于 struct 之上，和 struct 绑定，被称为 struct 的接收者（receiver）</p><p>例子如下</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	name <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>per Person<span class="token punctuation">)</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>per<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&quot;吃饭&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 需要是指针类型，否则传递的是值的副本</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>per <span class="token operator">*</span>Person<span class="token punctuation">)</span> <span class="token function">changeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	per<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;newName&quot;</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	person <span class="token operator">:=</span> Person<span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">&quot;xiaoso&quot;</span><span class="token punctuation">}</span>
	person<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    person<span class="token punctuation">.</span><span class="token function">changeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    person<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接收者类型不一定需要是 struct，可以是 slice、map、channel 等类型</p><p>如果接收者是一个指针类型，则自动解除引用</p><h3 id="接口" tabindex="-1"><a class="header-anchor" href="#接口" aria-hidden="true">#</a> 接口</h3><p>接口用于定义具有通用性的方法</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> my_interface <span class="token keyword">interface</span><span class="token punctuation">{</span>
    method1 <span class="token punctuation">[</span>return_type<span class="token punctuation">]</span>
    method2 <span class="token punctuation">[</span>return_type<span class="token punctuation">]</span>
    method3 <span class="token punctuation">[</span>return_type<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">type</span> USB <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Mobile <span class="token keyword">struct</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token comment">// 实现接口</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c Mobile<span class="token punctuation">)</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c Mobile<span class="token punctuation">)</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">writeIt</span><span class="token punctuation">(</span>device USB<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	device<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> myMobile USB <span class="token operator">=</span> Mobile<span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token function">writeIt</span><span class="token punctuation">(</span>myMobile<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>组合接口</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Filyer <span class="token keyword">interface</span><span class="token punctuation">{</span>
    <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Swimmer <span class="token keyword">interface</span><span class="token punctuation">{</span>
    <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Fish <span class="token keyword">interface</span><span class="token punctuation">{</span>
    Filyer
    Swimmer
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="继承" tabindex="-1"><a class="header-anchor" href="#继承" aria-hidden="true">#</a> 继承</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Animal <span class="token keyword">struct</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>animal Animal<span class="token punctuation">)</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;hi&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Cat <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token comment">// 注意没名称</span>
	Animal
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	myCat <span class="token operator">:=</span> Cat<span class="token punctuation">{</span>Animal<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
	myCat<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="并发" tabindex="-1"><a class="header-anchor" href="#并发" aria-hidden="true">#</a> 并发</h2><h3 id="go-和-channel" tabindex="-1"><a class="header-anchor" href="#go-和-channel" aria-hidden="true">#</a> go 和 channel</h3><p>go 可以开启一个协程，如果主进程结束，协程也会退出</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">go</span> <span class="token function">myFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>channel 用于在 goroutine 之间共享数据</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>unBuffered <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token comment">// int 无缓冲通道，发送接收会阻塞</span>
bufferd <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// 大小为 1int 有缓冲通道</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>将值发送到通道</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>chan1 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>
chan1 <span class="token operator">&lt;-</span> <span class="token string">&quot;Australia&quot;</span> <span class="token comment">// 通过通道发送字符串</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>从通道接受值</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>data := &lt;- chan1

data,ok := &lt;- chan1 // 是否读取到值

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>close 可以关闭通道，关闭后，读通道，会读取到读默认值</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token function">close</span><span class="token punctuation">(</span>chan1<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通道要及时关闭，否则容易出现死锁</p><h3 id="waitgroup" tabindex="-1"><a class="header-anchor" href="#waitgroup" aria-hidden="true">#</a> WaitGroup</h3><p>WaitGroup 用于阻塞等待</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup

<span class="token keyword">func</span> <span class="token function">hello</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// -1</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;hello goroutine &quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// wg 组 +1</span>
		<span class="token keyword">go</span> <span class="token function">hello</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 等带所有协程执行完毕,也就是 wg=0 时</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="runtime-包" tabindex="-1"><a class="header-anchor" href="#runtime-包" aria-hidden="true">#</a> runtime 包</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>runtime<span class="token punctuation">.</span><span class="token function">Goshed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 让出 CPU 时间片，重新等待安排任务</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>runtime<span class="token punctuation">.</span><span class="token function">Goexit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 退出当前协程</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>runtime<span class="token punctuation">.</span><span class="token function">NumCPU</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 查看 cpi 核心数</span>
runtime<span class="token punctuation">.</span><span class="token function">GOMAXPROCS</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 设置协程核心数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mutex-锁" tabindex="-1"><a class="header-anchor" href="#mutex-锁" aria-hidden="true">#</a> mutex 锁</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> lock sync<span class="token punctuation">.</span>Mutex

lock<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 加锁</span>
lock<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 解锁</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="select-switch" tabindex="-1"><a class="header-anchor" href="#select-switch" aria-hidden="true">#</a> select switch</h3><p>select 是 Go 中一个控制结构，用于处理异步 IO 操作，select 会监听 case 语句的 channel 读写操作，当 case 中的 channel 读写操作为非阻塞状态时，会触发对应动作</p><ol><li>default 总是可运行的</li><li>case 语句必须是一个 channel 操作</li><li>如果有多个可运行 case，会公平地选出一个执行</li><li>如果没有可运行 case，有 default，会执行 default</li><li>如果没有可运行 case，没有 default，会阻塞 select，直到某个 case 通信可运行</li></ol><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    chanInt <span class="token operator">&lt;-</span> <span class="token number">100</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="timer" tabindex="-1"><a class="header-anchor" href="#timer" aria-hidden="true">#</a> Timer</h3><p>Timer 可以实现一些定时操作</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>timer1 <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">NewTimer</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">)</span>
t1 <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;t1:%v\\n&quot;</span><span class="token punctuation">,</span> t1<span class="token punctuation">)</span>

<span class="token comment">// &lt;-timer1.C 会等待到创建计时器后 time.Second * 1 时间</span>
t2 <span class="token operator">:=</span> <span class="token operator">&lt;-</span>timer1<span class="token punctuation">.</span>C
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;t2:%v\\n&quot;</span><span class="token punctuation">,</span> t2<span class="token punctuation">)</span>

<span class="token comment">// 再等待 1s</span>
<span class="token operator">&lt;-</span>time<span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>取消</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>timer1 <span class="token operator">:=</span> timer<span class="token punctuation">.</span><span class="token function">NewTimer</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>

<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token operator">&lt;-</span>timer1<span class="token punctuation">.</span>C
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Timer 1 expired&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

stop <span class="token operator">:=</span> timer1<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 停止定时器,对应方法不再执行</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还有 reset 之类的方法</p><h3 id="ticker" tabindex="-1"><a class="header-anchor" href="#ticker" aria-hidden="true">#</a> Ticker</h3><p>Timer 只执行一次，Ticker 是周期性执行</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>ticker <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">NewTicker</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>

counter <span class="token operator">:=</span> <span class="token number">1</span>
<span class="token keyword">for</span> <span class="token boolean">_</span> <span class="token operator">=</span> <span class="token keyword">range</span> ticker<span class="token punctuation">.</span>C <span class="token punctuation">{</span>
    fmt<span class="token punctuation">.</span><span class="token function">PrintLn</span><span class="token punctuation">(</span><span class="token string">&quot;ticker&quot;</span><span class="token punctuation">)</span>
    counter <span class="token operator">++</span>
    <span class="token keyword">if</span> couter <span class="token operator">&gt;=</span> <span class="token number">5</span><span class="token punctuation">{</span>
        ticker<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">break</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="atomic" tabindex="-1"><a class="header-anchor" href="#atomic" aria-hidden="true">#</a> atomic</h3><p>原子增加</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> i <span class="token builtin">int32</span> <span class="token operator">=</span> <span class="token number">100</span>
<span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    atomic<span class="token punctuation">.</span><span class="token function">AddInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>i<span class="token punctuation">,</span>i<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>原子读写，go 在读变量的时候，读一般可能会被中断</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>atomic<span class="token punctuation">.</span><span class="token function">LoadInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>i<span class="token punctuation">)</span>
atomic<span class="token punctuation">.</span><span class="token function">StoreInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>i<span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>cas</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>ok <span class="token operator">:=</span> atomic<span class="token punctuation">.</span><span class="token function">CompareAndSwapInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>i<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="包管理" tabindex="-1"><a class="header-anchor" href="#包管理" aria-hidden="true">#</a> 包管理</h2><p>包管理现在常使用 go module</p><p>初始化模块</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">go</span> mod init <span class="token operator">&lt;</span>项目模块名<span class="token operator">&gt;</span>
<span class="token keyword">go</span> mod init xiaoso<span class="token operator">/</span>testmod
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>依赖关系处理，根据 go.mod 文件</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">go</span> mod tidy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将依赖包复制到项目下的 vendor 目录</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">go</span> mod vendor
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>显示依赖关系</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">go</span> list <span class="token operator">-</span>m all
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>显示详细依赖关系</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">go</span> list <span class="token operator">-</span>m <span class="token operator">-</span>json all
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下载依赖</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">go</span> mod download <span class="token punctuation">[</span>path@version<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2><p>https://www.bilibili.com/video/BV1zR4y1t7Wj</p>`,187);function m(b,g){const e=i("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("代理配置方法："),n("a",d,[s("七牛云 - Goproxy.cn"),t(e)])]),r,n("p",null,[n("a",k,[s("Git - Downloads (git-scm.com)"),t(e)])]),v])}const f=p(l,[["render",m],["__file","go入门.html.vue"]]);export{f as default};
