import{_ as n,r,o as s,c,d as a,a as e,b as t,e as d}from"./app-9157d7b3.js";const l={},h=d('<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p>RabbitMQ是使用Erlang语言开发的开源消息队列系统，基于AMQP协议来实现。AMQP的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。</p><p>AMQP协议更多用在企业系统内对数据一致性、稳定性和可靠性要求很高的场景，对性能和吞吐量的要求还在其次。</p><p>优点：可靠性高，延迟低</p><p>缺点：吞吐较低</p><h2 id="消息模型" tabindex="-1"><a class="header-anchor" href="#消息模型" aria-hidden="true">#</a> 消息模型</h2><p>Vhost：虚拟主机，用于隔离不同服务</p><p>Exchange（交换机）：生产者发送消息到交换机，交换机再根据自身类型和规则把消息发送到 Queue</p><p>Queue（队列）：存储消息，提供给消费者消费</p><p>RoutingKey：路由规则描述</p><p>消息的RoutingKey：描述消息特征，例如可以给创建用户的消息带上<code>user.create</code></p><p>队列的RoutingKey：描述队列接收的消息特征，例如可以给队列指定从交换机0接收消息，RoutingKey为<code>user.*</code>，表示接创建用户，更新用户等消息</p><p>Binding（绑定）：描述交换机和队列的关联关系</p>',13),b=d(`<p>一般来说，带有交换机的消息模型如上</p><h3 id="交换机和routingkey" tabindex="-1"><a class="header-anchor" href="#交换机和routingkey" aria-hidden="true">#</a> 交换机和RoutingKey</h3><p>RabbitMQ 交换机有多种类型，支持不同的匹配规则，并按照规则转发到指定队列</p><table><thead><tr><th>交换机类型</th><th>描述</th></tr></thead><tbody><tr><td>Direct</td><td>在消息路由时，根据消息的routing key完全匹配进行转发。</td></tr><tr><td>Topic</td><td>在消息路由时，根据消息的routing key和通配符模式进行转发。</td></tr><tr><td>Fanout</td><td>将消息广播到所有绑定到交换机的队列中。忽略routing key。</td></tr><tr><td>Headers</td><td>在消息路由时，根据消息的headers进行匹配和转发。</td></tr><tr><td>Default</td><td>RabbitMQ默认的交换机类型。直接将消息发送到与消息的routing key匹配的队列中。如果没有匹配的队列，消息将被丢弃。</td></tr></tbody></table><p>Topic交换机支持两种通配符：<code>*</code>（星号）和 <code>#</code>（井号）</p><ol><li>星号（<code>*</code>）：可以匹配一个单词。 例如，<code>a.*</code> 可以匹配 <code>a.b</code>、<code>a.c</code>，但不会匹配 <code>a.b.c</code>。</li><li>井号（<code>#</code>）：可以匹配零个或多个单词。 例如，<code>a.#</code> 可以匹配 <code>a.b</code>、<code>a.b.c</code>、<code>a.b.c.d</code> 等</li></ol><p>注意：</p><ul><li>单词之间使用点号来分隔。</li><li>通配符只能匹配单级或多级单词，并不能匹配特定字符。</li><li>可以在同一个Topic交换机中结合使用多个通配符来实现更灵活的路由匹配。</li></ul><h2 id="命令行工具" tabindex="-1"><a class="header-anchor" href="#命令行工具" aria-hidden="true">#</a> 命令行工具</h2><p>RabbitMQ命令工具主要有以下几种：</p><ol><li>rabbitmqctl：用于管理RabbitMQ服务器的命令行工具。它可以用于创建、删除和管理队列、交换机、绑定和用户等。</li><li>rabbitmq-plugins：用于管理RabbitMQ插件的命令行工具。它可以用于启用、禁用和列出已安装的插件。</li><li>rabbitmqadmin：一个用于管理RabbitMQ服务器的Web界面。它提供了一个基于HTTP的GUI，可以用于执行与rabbitmqctl相同的操作。</li><li>rabbitmq-diagnostics：用于诊断RabbitMQ服务器的命令行工具。它可以提供有关服务器性能、连接状态和节点信息的详细信息。</li><li>rabbitmq-server：RabbitMQ服务器本身的启动命令。它用于启动、停止或重新启动RabbitMQ服务器。</li></ol><h3 id="rabbitmqctl" tabindex="-1"><a class="header-anchor" href="#rabbitmqctl" aria-hidden="true">#</a> rabbitmqctl</h3><h4 id="管理" tabindex="-1"><a class="header-anchor" href="#管理" aria-hidden="true">#</a> 管理</h4><p><code>rabbitmqctl list_connections</code>：列出当前RabbitMQ服务器上的所有连接</p><h4 id="用户" tabindex="-1"><a class="header-anchor" href="#用户" aria-hidden="true">#</a> 用户</h4><p><code>rabbitmqctl list_users</code>：列出当前RabbitMQ服务器上的所有用户</p><p><code>rabbitmqctl add_user &lt;username&gt; &lt;password&gt;</code>：添加一个新的用户，并设置密码。</p><p><code>rabbitmqctl delete_user &lt;username&gt;</code>：删除指定的用户</p><h4 id="权限" tabindex="-1"><a class="header-anchor" href="#权限" aria-hidden="true">#</a> 权限</h4><p><code>rabbitmqctl list_permissions</code>：列出当前RabbitMQ服务器上的所有权限</p><p><code>rabbitmqctl set_permissions -p &lt;vhost_name&gt; &lt;username&gt; &lt;permission&gt; &lt;read_permission&gt; &lt;write_permission&gt; &lt;configure_permission&gt;</code>：为指定用户设置权限。</p><h4 id="vhost" tabindex="-1"><a class="header-anchor" href="#vhost" aria-hidden="true">#</a> vhost</h4><p><code>rabbitmqctl list_vhosts</code>：列出当前RabbitMQ服务器上的所有虚拟主机</p><p><code>rabbitmqctl add_vhost &lt;vhost_name&gt;</code>：添加一个新的虚拟主机</p><h4 id="队列" tabindex="-1"><a class="header-anchor" href="#队列" aria-hidden="true">#</a> 队列</h4><p><code>rabbitmqctl list_queues</code>:列出队列</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl list_queues name messages consumers state <span class="token parameter variable">-p</span> vhost-name
name messages consumers state 都为可选参数，表示队列信息
vhost-name 是vhost名，可以使通配符，例如 <span class="token string">&#39;.*&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="集群" tabindex="-1"><a class="header-anchor" href="#集群" aria-hidden="true">#</a> 集群</h2><h3 id="集群发现" tabindex="-1"><a class="header-anchor" href="#集群发现" aria-hidden="true">#</a> 集群发现</h3><p>RabbitMQ集群节点通过Peer Discovery互相发现</p><p>RabbitMQ本身提供以下方式发现：</p><ul><li>配置文件</li><li>预置的 DNS 记录</li></ul><p>RabbitMQ插件提供以下发现方式：</p><ul><li>AWS（EC2）</li><li>K8S</li><li>consul</li><li>etcd</li></ul>`,34),p={href:"https://www.rabbitmq.com/cluster-formation.html",target:"_blank",rel:"noopener noreferrer"},u=e("h3",{id:"集群模式",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#集群模式","aria-hidden":"true"},"#"),t(" 集群模式")],-1),m=e("p",null,"RabbitMQ集群支持普通模式和集群模式：",-1),_=e("ul",null,[e("li",null,[e("p",null,"普通模式：集群各节点只同步数据结构（队列结构），不同步消息。当客户端访问当前节点，发现该节点没有队列消息，临时去其他接口同步消息。")]),e("li",null,[e("p",null,"镜像模式：集群各节点同步数据结构和消息，镜像模式通过队列镜像来同步队列，现在推荐使用Quorum Queues而不是经典队列镜像")])],-1),g=e("h2",{id:"参考",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#参考","aria-hidden":"true"},"#"),t(" 参考")],-1),f={href:"https://juejin.cn/post/7248914499914481725?searchId=202307171110097CEC7B6AC00F6705B0AF",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://juejin.cn/post/7254267283249840184?searchId=20230719083155D35805FB8ACA0F16890C",target:"_blank",rel:"noopener noreferrer"};function M(v,R){const o=r("Mermaid"),i=r("ExternalLinkIcon");return s(),c("div",null,[h,a(o,{id:"mermaid-39",code:"eJxLL0osyFDwCeJ6PmX+k13LXzS06uraPdm15Fnvomdzdhno6j7Z0fB03awX29c/n7LxxfKWpx0zgQpezpj/tGO6I5D1bFvHiy07gdocuYjU5YSsy4kLAKOgSj8="}),b,e("p",null,[t("相关："),e("a",p,[t("Cluster Formation and Peer Discovery — RabbitMQ"),a(i)])]),u,m,_,g,e("p",null,[e("a",f,[t("RabbitMQ基础复习 - 掘金 (juejin.cn)"),a(i)])]),e("p",null,[e("a",Q,[t("MQ黄金三剑客：RabbitMQ、RocketMQ和Kafka深入解密常见问题及功能对比指南？ - 掘金 (juejin.cn)"),a(i)])])])}const q=n(l,[["render",M],["__file","RabbitMQ.html.vue"]]);export{q as default};
