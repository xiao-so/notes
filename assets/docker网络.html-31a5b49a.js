import{_ as e,o as t,c as r,e as a}from"./app-9157d7b3.js";const d={},o=a('<h2 id="docker-网络简介" tabindex="-1"><a class="header-anchor" href="#docker-网络简介" aria-hidden="true">#</a> Docker 网络简介</h2><p>Docker使用Linux桥接网卡，在宿主机虚拟一个docker容器网桥（docker0），docker启动一个容器时会根据docker网桥的网段分配给容器一个IP地址，称为Container-IP，同时Docker网桥是每个容器的默认网络网关。因为在同一宿主机内的容器都接入同一个网桥，这样容器之间就能够通过容器的Container-IP直接通信。</p><p>docker网桥是宿主机虚拟出来的，并不是真实存在的网络设备，外部网络是无法寻址到的，这也意味着外部网络无法通过直接Container-IP访问到容器。</p><h2 id="术语" tabindex="-1"><a class="header-anchor" href="#术语" aria-hidden="true">#</a> 术语</h2><p>网桥：是一种网络设备，用于连接两个或多个网络，使它们能够互相通信。它通过物理层的转发来实现网络的连通性。</p><p>网卡（即网络接口卡）：是计算机用于与网络进行通信的硬件设备。它通常是安装在计算机主板上的一个插槽卡或者集成在主板上的接口。</p><p>网桥和网卡之间的关系是，网桥通过网卡与不同的网络进行连接。网桥上的网卡接收到的数据包会被分析，并根据目标地址将其转发到相应的网络中。网桥的作用是实现网络之间的通信和数据包的转发，而网卡是实现计算机和网络之间的连接通道。</p><h2 id="docker-网络模式" tabindex="-1"><a class="header-anchor" href="#docker-网络模式" aria-hidden="true">#</a> Docker 网络模式</h2><table><thead><tr><th>Docker网络模式</th><th>配置</th><th>说明</th></tr></thead><tbody><tr><td>host模式</td><td>–net=host</td><td>容器和宿主机共享<code>Network namespace</code>。 容器将不会虚拟出自己的网卡，配置自己的IP 等，而是使用宿主机的IP和端口。</td></tr><tr><td>container模式</td><td>–net=container:NAME_or_ID</td><td>容器和另外一个容器共享<code>Network namespace</code>。 kubernetes中的pod就是多个容器共享一个<code>Network namespace</code>。 创建的容器不会创建自己的网卡，配置自己的 IP， 而是和一个指定的容器共享IP、端口范围。</td></tr><tr><td>none模式</td><td>–net=none</td><td>容器有独立的<code>Network namespace</code>，并没有对其进行任何网络设置，如分配veth pair和网桥连接，配置IP等。 <code>该模式关闭了容器的网络功能。</code></td></tr><tr><td>bridge模式</td><td>–net=bridge</td><td>(默认模式)。此模式会为每一个容器分配、设置IP等，并将容器连接到一个<code>docker0虚拟网桥</code>，通过<code>docker0网桥</code>以及<code>Iptable nat</code>表配置与宿主机通信</td></tr><tr><td>Macvlan network</td><td>无</td><td>容器具备Mac地址，使其显示为网络上的物理 设备</td></tr><tr><td>Overlay</td><td>无</td><td>(覆盖网络): 利用VXLAN实现的bridge模式</td></tr></tbody></table><h3 id="bridge模式" tabindex="-1"><a class="header-anchor" href="#bridge模式" aria-hidden="true">#</a> bridge模式</h3><p>bridge是默认的网络模式，该模式容器没有公有ip，只有宿主机可以直接访问，外部主机是不可见的，但容器通过宿主机的NAT规则后可以访问外网。</p><h4 id="bridge-桥接模式的实现" tabindex="-1"><a class="header-anchor" href="#bridge-桥接模式的实现" aria-hidden="true">#</a> Bridge 桥接模式的实现</h4><ul><li>Docker Daemon利用veth pair技术，在宿主机上创建两个虚拟网络接口设备，假设为veth0 和veth1。而veth pair技术的特性可以保证无论哪一个veth接收到网络报文，都会将报文传输给另一方。</li><li>Docker Daemon将veth0附加到Docker Daemon创建的docker0网桥上。保证宿主机的网络报文可以发往veth0;</li><li>Docker Daemon 将veth1添加到Docker Container所属的namespace下，并被改名为eth0。 如此一来，保证宿主机的网络报文若发往veth0则立即会被eth0接收，实现宿主机到Docker Container网络的联通性;同时也保证Docker Container单独使用eth0，实现容器网络环境的隔离性。</li></ul><h4 id="bridge桥接模式的缺陷" tabindex="-1"><a class="header-anchor" href="#bridge桥接模式的缺陷" aria-hidden="true">#</a> Bridge桥接模式的缺陷</h4><p>Docker Container不具有公有IP，即和宿主机eth0不处于同一个网段。导致的结果是宿主机以外的世界不能直接和容器进行通信。</p><h4 id="注意" tabindex="-1"><a class="header-anchor" href="#注意" aria-hidden="true">#</a> 注意</h4><p>eth设备是成双成对出现的，一端是容器内部命名为eth0，一端是加入到网桥并命名的veth(通常命名为veth)，它们组成了一个数据传输通道，一端进一端出，veth设备连接了两个网络设备并实现了数据通信。</p><h3 id="host网络模式" tabindex="-1"><a class="header-anchor" href="#host网络模式" aria-hidden="true">#</a> Host网络模式</h3><p>host模式相当于Vmware中的NAT模式，与宿主机在同一个网络中，但没有独立IP地址</p><p>启动容器使用host模式，容器将不会获得一个独立的Network Namespace，而是和宿主机共用一个Network Namespace。</p><p>容器将不会虚拟出自己的网卡，配置自己的IP等，而是使用宿主机的IP和端口。除此之外容器的其他方面，比如文件系统、进程列表等还是和宿主机隔离</p><h4 id="优点" tabindex="-1"><a class="header-anchor" href="#优点" aria-hidden="true">#</a> 优点</h4><p>使用host模式的容器可以直接使用宿主机的IP地址与外界通信，容器内部的服务端口也可以使用宿主机的端口，不需要进行NAT</p><p>host最大的优势就是网络性能比较好，docker host上已经使用的端口就不能再用了，网络的隔离性不好。</p><p>host网络模式需要在容器创建时指定<code>–network=host</code></p><p>host模式是bridge桥接模式很好的补充。采用host模式的Docker Container，可以直接使用宿主机的IP地址与外界进行通信，若宿主机的eth0是一个公有IP，那么容器也拥有这个公有IP。同时容器内服务的端口也可以使用宿主机的端口，无需额外进行NAT转换。</p><p>host模式可以让容器共享宿主机网络栈,这样的好处是外部主机与容器直接通信,但是容器的网络缺少隔离性。</p><h4 id="缺陷" tabindex="-1"><a class="header-anchor" href="#缺陷" aria-hidden="true">#</a> 缺陷</h4><p>使用Host模式的容器不再拥有隔离、独立的网络环境。虽然可以让容器内部的服务和传统情况无差别、无改造的使用，但是由于网络隔离性的弱化，该容器会与宿主机共享竞争网络栈的使用; 另外，容器内部将不再拥有所有的端口资源，原因是部分端口资源已经被宿主机本身的服务占用，还有部分端口已经用以bridge网络模式容器的端口映射。</p><h3 id="container网络模式" tabindex="-1"><a class="header-anchor" href="#container网络模式" aria-hidden="true">#</a> Container网络模式</h3><p>一种特殊host网络模式， container网络模式是Docker中一种较为特别的网络的模式。在容器创建时使用<code>–network=container:vm1</code>指定。(vm1指定的是运行的容器名)处于这个模式下的 Docker 容器会共享一个网络环境,这样两个容器之间可以使用localhost高效快速通信。</p><h4 id="缺陷-1" tabindex="-1"><a class="header-anchor" href="#缺陷-1" aria-hidden="true">#</a> 缺陷</h4><p>Container网络模式没有改善容器与宿主机以外世界通信的情况(和桥接模式一样，不能连接宿主机以外的其他设备)。</p><p>这个模式指定新创建的容器和已经存在的一个容器共享一个Network Namespace，而不是和宿主机共享。新创建的容器不会创建自己的网卡，配置自己的IP，而是和一个指定的容器共享IP、端口范围等。 同样，两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的。两个容器的进程可以通过lo网卡设备通信。</p><h3 id="none模式" tabindex="-1"><a class="header-anchor" href="#none模式" aria-hidden="true">#</a> none模式</h3><p>使用none模式，Docker容器拥有自己的Network Namespace，但是，并不为Docker容器进行任何网络配置。Docker容器没有网卡、IP、路由等信息。需要我们自己为Docker容器添加网卡、配置IP等。</p><p>这种网络模式下容器只有lo回环网络，没有其他网卡。none模式可以在容器创建时通过-- network=none来指定。这种类型的网络没有办法联网，封闭的网络能很好的保证容器的安全性。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2><p>https://juejin.cn/post/7041923410649153543</p>',39),h=[o];function n(c,i){return t(),r("div",null,h)}const p=e(d,[["render",n],["__file","docker网络.html.vue"]]);export{p as default};
