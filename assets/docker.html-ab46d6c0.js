import{_ as t,r as d,o as r,c as i,a,b as e,d as n,e as o}from"./app-9157d7b3.js";const c="/notes/assets/image-20230130104335167-bd2933c7.png",l={},p=a("h2",{id:"简介",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#简介","aria-hidden":"true"},"#"),e(" 简介")],-1),u=a("p",null,"解决问题：Docker 主要解决应用环境依赖问题，把环境和应用一起打包发布",-1),h=a("p",null,"和 VM 对比：和虚拟机 VM 相比，Docker 没有内置主操作系统，而是使用守护进程与主操作系统通信，将 Docker 容器和主操作系统隔离",-1),k=a("p",null,"docker 镜像（核心 4M+运行环境 Lib+程序 App）小，启动快",-1),v=a("p",null,"docker 基于 go 语言",-1),b={href:"https://docs.docker.com/",target:"_blank",rel:"noopener noreferrer"},m=o(`<h2 id="术语" tabindex="-1"><a class="header-anchor" href="#术语" aria-hidden="true">#</a> 术语</h2><p>镜像：轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需的全部内容，包括代码、运行时、库、环境变量和配置文件</p><p>容器：镜像实例</p><p>数据卷（volume）：将容器的目录映射到主机上，提供容器文件同步、持久化到主机</p><p>Dockerfile：构建镜像文本文件</p><h2 id="快速开始" tabindex="-1"><a class="header-anchor" href="#快速开始" aria-hidden="true">#</a> 快速开始</h2><h3 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h3><p>以 CentOS 为例</p><ol><li><p>卸载残留文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token function">sudo</span> yum remove <span class="token function">docker</span> <span class="token punctuation">\\</span>
                  docker-client <span class="token punctuation">\\</span>
                  docker-client-latest <span class="token punctuation">\\</span>
                  docker-common <span class="token punctuation">\\</span>
                  docker-latest <span class="token punctuation">\\</span>
                  docker-latest-logrotate <span class="token punctuation">\\</span>
                  docker-logrotate <span class="token punctuation">\\</span>
                  docker-engine
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>安装 <code>yum-utils</code> 工具</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> yum-utils
   
 <span class="token function">sudo</span> yum-config-manager <span class="token punctuation">\\</span>
    --add-repo <span class="token punctuation">\\</span>
    https://download.docker.com/linux/centos/docker-ce.repo
 <span class="token comment"># 如果第二步不行，可以使用国内仓库</span>
 <span class="token function">sudo</span> yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>安装 docker 社区版 (ce)、客户端</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token function">sudo</span> yum <span class="token function">install</span> docker-ce docker-ce-cli containerd.io
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h3 id="启动-docker" tabindex="-1"><a class="header-anchor" href="#启动-docker" aria-hidden="true">#</a> 启动 Docker</h3><p>启动 docker 服务</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl start <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>验证是否已经安装启动</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">docker</span> run hello-world
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="设置镜像仓库" tabindex="-1"><a class="header-anchor" href="#设置镜像仓库" aria-hidden="true">#</a> 设置镜像仓库</h2><p>修改 <code>/etc/docker/daemon.json</code> 文件，添加镜像仓库地址 <code>xxxxxxx</code> 如下</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
   <span class="token property">&quot;registry-mirrors&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token string">&quot;xxxxxxx&quot;</span>
   <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启 docker 服务</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">service</span> <span class="token function">docker</span> restart
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="docker-命令" tabindex="-1"><a class="header-anchor" href="#docker-命令" aria-hidden="true">#</a> Docker 命令</h2><p><img src="`+c+`" alt="image-20230130104335167"></p><h3 id="镜像" tabindex="-1"><a class="header-anchor" href="#镜像" aria-hidden="true">#</a> 镜像</h3><p>轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需的全部内容，包括代码、运行时、库、环境变量和配置文件</p><h4 id="查看已有镜像" tabindex="-1"><a class="header-anchor" href="#查看已有镜像" aria-hidden="true">#</a> 查看已有镜像</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> images
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="搜索镜像" tabindex="-1"><a class="header-anchor" href="#搜索镜像" aria-hidden="true">#</a> 搜索镜像</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> search mysql
<span class="token parameter variable">--filter</span><span class="token operator">=</span>start<span class="token operator">=</span><span class="token number">3000</span> <span class="token comment"># 过滤 star&gt;= 3000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="下载镜像" tabindex="-1"><a class="header-anchor" href="#下载镜像" aria-hidden="true">#</a> 下载镜像</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull <span class="token operator">&lt;</span>镜像名<span class="token operator">&gt;</span><span class="token punctuation">[</span>:版本号 <span class="token punctuation">]</span>

例:
<span class="token function">docker</span> pull mysql:5.7
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="删除镜像" tabindex="-1"><a class="header-anchor" href="#删除镜像" aria-hidden="true">#</a> 删除镜像</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 通过 id 删除镜像</span>
<span class="token function">docker</span> rmi <span class="token parameter variable">-f</span> 镜像 <span class="token function">id</span> 镜像 id2 镜像 id3

<span class="token comment"># 删除全部容器</span>
<span class="token function">docker</span> rmi <span class="token parameter variable">-f</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> images <span class="token parameter variable">-aq</span><span class="token variable">)</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="容器" tabindex="-1"><a class="header-anchor" href="#容器" aria-hidden="true">#</a> 容器</h3><p>容器是镜像的实例化</p><h4 id="操作容器" tabindex="-1"><a class="header-anchor" href="#操作容器" aria-hidden="true">#</a> 操作容器</h4><h5 id="运行容器" tabindex="-1"><a class="header-anchor" href="#运行容器" aria-hidden="true">#</a> 运行容器</h5><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token operator">&lt;</span>镜像名<span class="token operator">&gt;</span><span class="token punctuation">[</span>:版本号 <span class="token punctuation">]</span>
例子:
<span class="token comment"># 一种测试推荐用法，用完就删，一般用来测试</span>
<span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--rm</span> tomcat:9.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>选项</th><th>默认</th><th>描述</th></tr></thead><tbody><tr><td>--name</td><td></td><td>给容器起名</td></tr><tr><td>-d</td><td></td><td>以后台方式运行，注意因为 docker 是以守护进程方式运行，发现没有对外提供服务，会自动停止</td></tr><tr><td>-it /bin/bash</td><td></td><td>使用交互方式运行，使用 bash</td></tr><tr><td>-p</td><td></td><td>端口映射，可选两种格式，使用多个参数 p 可以指定多个端口 <br>1.主机端口:容器端口 <br>2.容器端口</td></tr><tr><td>-P</td><td></td><td>随机指定端口映射</td></tr><tr><td>-v</td><td></td><td>挂载卷，支持以下格式 <br>1. <code>主机目录:容器内目录</code><br>2. 具名挂载：<code>卷名称:容器内目录</code><br>3. 匿名挂载：<code>容器内目录</code></td></tr><tr><td>--entrypoint</td><td>镜像 ENTRYPOINT</td><td>覆盖 ENTRYPOINT</td></tr></tbody></table><h5 id="退出容器" tabindex="-1"><a class="header-anchor" href="#退出容器" aria-hidden="true">#</a> 退出容器</h5><p>这里说的退出指进入到容器交互方式时的退出</p><table><thead><tr><th>操作</th><th>效果</th></tr></thead><tbody><tr><td>输入 <code>exit</code></td><td>容器停止并退出</td></tr><tr><td>按下<code>Ctrl + P + Q</code></td><td>容器不停止退出</td></tr></tbody></table><h5 id="启动和停止容器" tabindex="-1"><a class="header-anchor" href="#启动和停止容器" aria-hidden="true">#</a> 启动和停止容器</h5><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> start <span class="token operator">&lt;</span>容器 id<span class="token operator">&gt;</span>
<span class="token function">docker</span> restart <span class="token operator">&lt;</span>容器 id<span class="token operator">&gt;</span>
<span class="token function">docker</span> stop <span class="token operator">&lt;</span>容器 id<span class="token operator">&gt;</span>
<span class="token function">docker</span> <span class="token function">kill</span> <span class="token operator">&lt;</span>容器 id<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="进入当前正在运行的容器" tabindex="-1"><a class="header-anchor" href="#进入当前正在运行的容器" aria-hidden="true">#</a> 进入当前正在运行的容器</h5><ol><li>这个方式是进入容器，并使用了新的 bash</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> <span class="token operator">&lt;</span>容器 id<span class="token operator">&gt;</span> /bin/bash
通过/bin/bash 命令行
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>这个方式是进入旧的，没有新开 bash</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> attach <span class="token operator">&lt;</span>容器 id<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="文件拷贝" tabindex="-1"><a class="header-anchor" href="#文件拷贝" aria-hidden="true">#</a> 文件拷贝</h5><p>从容器内拷贝文件到主机上</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">cp</span> <span class="token operator">&lt;</span>容器 id:容器内路径<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>目的地主机路径<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>从主机拷贝文件到容器中</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">cp</span> <span class="token operator">&lt;</span>文件路径<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>容器长 ID:docker 容器中的路径<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="查看容器信息" tabindex="-1"><a class="header-anchor" href="#查看容器信息" aria-hidden="true">#</a> 查看容器信息</h4><h5 id="查看容器列表" tabindex="-1"><a class="header-anchor" href="#查看容器列表" aria-hidden="true">#</a> 查看容器列表</h5><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">ps</span>

<span class="token parameter variable">-a</span> 列出当前运行和历史运行过的容器
<span class="token parameter variable">-n</span><span class="token operator">=</span>数量 显示最近创建的容器
<span class="token parameter variable">-q</span> 只显示容器的编号
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="查看容器日志" tabindex="-1"><a class="header-anchor" href="#查看容器日志" aria-hidden="true">#</a> 查看容器日志</h5><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> logs <span class="token operator">&lt;</span>容器 id<span class="token operator">&gt;</span>

<span class="token parameter variable">-f</span> <span class="token builtin class-name">:</span> 跟踪日志输出
<span class="token parameter variable">--since</span> :显示某个开始时间的所有日志
<span class="token parameter variable">-t</span> <span class="token builtin class-name">:</span> 显示时间戳
<span class="token parameter variable">--tail</span> :仅列出最新 N 条容器日志
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="查看容器中的进程信息" tabindex="-1"><a class="header-anchor" href="#查看容器中的进程信息" aria-hidden="true">#</a> 查看容器中的进程信息</h5><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">top</span> <span class="token operator">&lt;</span>容器 id<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="查看容器内部信息" tabindex="-1"><a class="header-anchor" href="#查看容器内部信息" aria-hidden="true">#</a> 查看容器内部信息</h5><p>创建信息，参数等等，环境变量等</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> inspect <span class="token operator">&lt;</span>容器 id<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="导入与导出" tabindex="-1"><a class="header-anchor" href="#导入与导出" aria-hidden="true">#</a> 导入与导出</h3><h4 id="导出镜像到本地镜像文件" tabindex="-1"><a class="header-anchor" href="#导出镜像到本地镜像文件" aria-hidden="true">#</a> 导出镜像到本地镜像文件</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> save <span class="token parameter variable">-o</span> <span class="token operator">&lt;</span>本地路径地址<span class="token operator">&gt;</span>.tar <span class="token operator">&lt;</span>镜像名<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="导入本地镜像" tabindex="-1"><a class="header-anchor" href="#导入本地镜像" aria-hidden="true">#</a> 导入本地镜像</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> load <span class="token parameter variable">-i</span> <span class="token operator">&lt;</span>本地镜像文件名<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="导出容器到本地容器包-镜像" tabindex="-1"><a class="header-anchor" href="#导出容器到本地容器包-镜像" aria-hidden="true">#</a> 导出容器到本地容器包（镜像）</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">export</span> <span class="token parameter variable">-o</span> <span class="token operator">&lt;</span>本地路径地址<span class="token operator">&gt;</span>.tar <span class="token operator">&lt;</span>容器名<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="导入本地容器生成的镜像" tabindex="-1"><a class="header-anchor" href="#导入本地容器生成的镜像" aria-hidden="true">#</a> 导入本地容器生成的镜像</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">import</span> <span class="token parameter variable">-o</span> <span class="token operator">&lt;</span>本地路径地址<span class="token operator">&gt;</span>.tar <span class="token operator">&lt;</span>镜像名<span class="token operator">&gt;</span>:<span class="token punctuation">[</span>版本号 <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="docker-save-与-docker-export" tabindex="-1"><a class="header-anchor" href="#docker-save-与-docker-export" aria-hidden="true">#</a> Docker Save 与 Docker Export</h4><ul><li><code>docker save</code> 保存的是镜像，<code>docker export</code> 保存的是容器</li><li><code>docker load</code> 用来载入镜像包，<code>docker import</code> 用来载入容器包，但两者都会恢复为镜像</li><li><code>docker load</code> 不能对载入的镜像重命名，而 <code>docker import</code> 可以为镜像指定新名称</li></ul><h3 id="卷" tabindex="-1"><a class="header-anchor" href="#卷" aria-hidden="true">#</a> 卷</h3><p>卷是特殊的文件或者目录，它将宿主机文件或者目录直接映射进容器中，可供一个或多个容器使用。</p><p>卷常用作容器数据持久化。</p><h4 id="创建卷" tabindex="-1"><a class="header-anchor" href="#创建卷" aria-hidden="true">#</a> 创建卷</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> volume create <span class="token operator">&lt;</span>卷名<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>选项</th><th>默认</th><th>描述</th></tr></thead><tbody><tr><td>--driver,-d</td><td>local</td><td>指定卷驱动程序名称</td></tr><tr><td>--label</td><td></td><td>为卷设置元数据</td></tr><tr><td>--name</td><td></td><td>指定卷名</td></tr><tr><td>--opt,-o</td><td></td><td>设置驱动程序特定选项</td></tr></tbody></table><h4 id="查看卷信息" tabindex="-1"><a class="header-anchor" href="#查看卷信息" aria-hidden="true">#</a> 查看卷信息</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> volume inspect <span class="token operator">&lt;</span>卷名<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="列出所有数据卷" tabindex="-1"><a class="header-anchor" href="#列出所有数据卷" aria-hidden="true">#</a> 列出所有数据卷</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> volume <span class="token function">ls</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="删除卷" tabindex="-1"><a class="header-anchor" href="#删除卷" aria-hidden="true">#</a> 删除卷</h4><p>删除所有未使用数据卷</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> volume prune
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>选项</th><th>默认</th><th>描述</th></tr></thead><tbody><tr><td>--filter</td><td></td><td>提供过滤器值（例如 ‘label=’）</td></tr><tr><td>--force,-f</td><td></td><td>不提示确认</td></tr></tbody></table><p>删除一个或多个卷</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> volume <span class="token function">rm</span> <span class="token operator">&lt;</span>卷名<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>选项</th><th>默认</th><th>描述</th></tr></thead><tbody><tr><td>--force,-f</td><td></td><td>强制删除一个或多个卷</td></tr></tbody></table><h2 id="制作和发布镜像" tabindex="-1"><a class="header-anchor" href="#制作和发布镜像" aria-hidden="true">#</a> 制作和发布镜像</h2><p>制作 docker 的镜像一般可以使用 Dockerfile 来构建，Dockerfile 包含了构建镜像所需的指令。</p><p>制作镜像也可以通过打包一个已有容器来构建，使用 docker commit 命令</p><h3 id="dockerfile-命令" tabindex="-1"><a class="header-anchor" href="#dockerfile-命令" aria-hidden="true">#</a> Dockerfile 命令</h3><h4 id="设置基础镜像" tabindex="-1"><a class="header-anchor" href="#设置基础镜像" aria-hidden="true">#</a> 设置基础镜像</h4><p>用于设置构造新镜像的基础镜像</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> &lt;镜像名&gt;[:版本号 ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="工作目录" tabindex="-1"><a class="header-anchor" href="#工作目录" aria-hidden="true">#</a> 工作目录</h4><p>创建和切换工作目录，之后的命令都在指定目录执行，支持相对路径和绝对路径，推荐只使用绝对路径</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">WORKDIR</span> &lt;工作目录路径&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="切换用户" tabindex="-1"><a class="header-anchor" href="#切换用户" aria-hidden="true">#</a> 切换用户</h4><p>切换容器内的用户，要求用户已经在（基础镜像）存在</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">USER</span> &lt;用户名&gt;[:&lt;用户组&gt;] </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果用户不存在，推荐使用命令先创建，如下添加了一个名为 <code>username</code> 的目录，指定了家目录<code>/home/username</code> ，当前用户默认使用 <code>/bin/bash</code></p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">RUN</span> useradd -d /home/username -m -s /bin/bash username USER username</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="变量" tabindex="-1"><a class="header-anchor" href="#变量" aria-hidden="true">#</a> 变量</h4><p>设置环境变量，环境变量可以在 Dockerfile 中引用，也可以在容器启动后引用</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">ENV</span> &lt;key1&gt; &lt;value1&gt;</span>
<span class="token instruction"><span class="token keyword">ENV</span> &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>设置 Dockerfile 内变量</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">ARG</span> &lt;key1&gt; &lt;value1&gt;</span>
<span class="token instruction"><span class="token keyword">ARG</span> &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>引用变量</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">RUN</span> echo <span class="token string">&quot;$key1&quot;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="添加文件" tabindex="-1"><a class="header-anchor" href="#添加文件" aria-hidden="true">#</a> 添加文件</h4><p>使用 COPY 把文件添加到镜像中，目标路径目录会自动创建，chown 参数用于改变文件拥有者和所属组</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">COPY</span> [--chown=&lt;user&gt;:&lt;group&gt;] &lt;源路径&gt; &lt;目标路径&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用 ADD 把文件添加到镜像中，会自动解压 gzip 等格式的压缩文件，推荐用 COPY</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">ADD</span> [--chown=&lt;user&gt;:&lt;group&gt;] &lt;源路径&gt; &lt;目标路径&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="执行命令" tabindex="-1"><a class="header-anchor" href="#执行命令" aria-hidden="true">#</a> 执行命令</h4><p>RUN 是构造新镜像时，在容器中执行的命令。可以认为启动镜像作为容器，然后再容器中运行命令，然后再打包成镜像</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">RUN</span> &lt;命令行命令&gt;</span>
<span class="token instruction"><span class="token keyword">RUN</span> [<span class="token string">&quot;可执行文件&quot;</span>,<span class="token string">&quot;参数 1&quot;</span>,<span class="token string">&quot;参数 2&quot;</span>,<span class="token string">&quot;参数 3&quot;</span>]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>CMD 是当我们使用容器时，默认启动的命令，CMD 的参数常用于变参。</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">CMD</span> &lt;命令行命令&gt;</span>
<span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">&quot;参数 1&quot;</span>,<span class="token string">&quot;参数 2&quot;</span>,<span class="token string">&quot;参数 3&quot;</span>] # 作为 ENTRYPOINT 的默认参数</span>
<span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">&quot;可执行文件&quot;</span>,<span class="token string">&quot;参数 1&quot;</span>,<span class="token string">&quot;参数 2&quot;</span>,<span class="token string">&quot;参数 3&quot;</span>]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 docker run 启动容器时，启动命令/参数， CMD 的全部内容会直接失效，被传入启动命令/参数替代。</p><p>例如：<code>CMD [&quot;/bin/top&quot;,&quot;-b&quot;]</code> ，启动容器 <code>docker run -it centos_top:v1 ps</code> ，<code>ps</code> 会替代 <code>/bin/top -b</code></p><p>ENTRYPOINT 是启动容器时，默认启动命令，ENTRYPOINT 传的参数不会被命令行覆盖，而是会追加在本来命令的后面，常用于定参</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [<span class="token string">&quot;可执行文件&quot;</span>,<span class="token string">&quot;参数 1&quot;</span>,<span class="token string">&quot;参数 2&quot;</span>,<span class="token string">&quot;参数 3&quot;</span>]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用 docker run 启动容器时，启动命令/参数会被追加到 ENTRYPOINT 后面</p><p>例如：<code>ENTRYPOINT [&quot;/bin/echo&quot;,&quot;a&quot;]</code> ，启动容器 <code>docker run -it centos_top:v1 &quot;b&quot;</code>, <code>&quot;b&quot;</code> 会追加在 ENTRYPOINT 后，变为<code>/bin/echo &quot;a&quot; &quot;b&quot;</code></p><h4 id="挂载卷" tabindex="-1"><a class="header-anchor" href="#挂载卷" aria-hidden="true">#</a> 挂载卷</h4><p>VOLUME 用于定义匿名数据卷。在启动容器时忘记挂载数据卷，会自动挂载到匿名卷</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">VOLUME</span> [<span class="token string">&quot;&lt;挂载路径 1&gt;&quot;</span>, <span class="token string">&quot;&lt;挂载路径 2&gt;&quot;</span>]</span>
<span class="token instruction"><span class="token keyword">VOLUME</span> &lt;挂载路径&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="端口" tabindex="-1"><a class="header-anchor" href="#端口" aria-hidden="true">#</a> 端口</h4><p>EXPOSE 用于声明可能会使用的端口，当使用 <code>-P</code> 启动容器时，会自动随机映射这些端口</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">EXPOSE</span> &lt;端口 1&gt; [&lt;端口 2&gt;...]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="根据-dockerfile-制作镜像" tabindex="-1"><a class="header-anchor" href="#根据-dockerfile-制作镜像" aria-hidden="true">#</a> 根据 Dockerfile 制作镜像</h3><p>docker build 命令可以根据 <code>Dockerfile</code> 文件构建镜像，命令格式和例子如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> build <span class="token punctuation">[</span>选项 <span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>选项 <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>上下文路径<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> build <span class="token parameter variable">-t</span> myApp:v1 <span class="token parameter variable">-f</span> Dockerfile <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>选项</th><th>默认</th><th>描述</th></tr></thead><tbody><tr><td>-t</td><td></td><td>指定构建镜像的名字和版本，格式为 <code>&lt;镜像名&gt;[:tag]</code></td></tr><tr><td>-f</td><td></td><td>指定构造用的 Dockerfile 文件</td></tr></tbody></table><p>上下文路径一般可以用 <code>.</code> 表示当前路径，会把当前路径下所有文件全部输送到 DOCKERFILE 构建时上下文</p><h3 id="使用-commit-制作镜像" tabindex="-1"><a class="header-anchor" href="#使用-commit-制作镜像" aria-hidden="true">#</a> 使用 Commit 制作镜像</h3><p>使用 docker commit 命令可以把容器制成一个镜像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> commit <span class="token punctuation">[</span>选项 <span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>选项 <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>容器 <span class="token function">id</span> 或容器名<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>镜像名:<span class="token operator">&gt;</span><span class="token punctuation">[</span>tag<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>选项</th><th>默认</th><th>描述</th></tr></thead><tbody><tr><td>-a</td><td></td><td>镜像作者</td></tr><tr><td>-m</td><td></td><td>提示文字</td></tr><tr><td>-p</td><td></td><td>commit 时，暂停容器</td></tr><tr><td>-c</td><td></td><td>使用 Dockerfile 指令来创建镜像</td></tr></tbody></table><h3 id="发布镜像" tabindex="-1"><a class="header-anchor" href="#发布镜像" aria-hidden="true">#</a> 发布镜像</h3><p>docker push 命令可以发布镜像，格式和例子如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> push <span class="token operator">&lt;</span>目的 <span class="token function">ip</span> 或域名:端口号/镜像名:tag<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> push <span class="token number">127.0</span>.0.1:1000/ubuntu:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,149),g={href:"https://www.runoob.com/docker/docker-dockerfile.html",target:"_blank",rel:"noopener noreferrer"};function f(x,q){const s=d("ExternalLinkIcon");return r(),i("div",null,[p,u,h,k,v,a("p",null,[e("文档地址："),a("a",b,[e("Docker Documentation | Docker Documentation"),n(s)])]),m,a("p",null,[a("a",g,[e("Docker 教程 "),n(s)])])])}const D=t(l,[["render",f],["__file","docker.html.vue"]]);export{D as default};
