import{_ as s,r as e,o as t,c as p,a as n,b as o,d as i,e as c}from"./app-9157d7b3.js";const l={},u=c(`<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p>Spring Expression Language (SpEL) 是 Spring Framework 中的一种表达式语言，可以用于在运行时计算表达式的值。 SpEL 支持基本的数学运算、调用方法、访问字段和本地变量、访问 Spring Bean 属性和调用 Bean 方法。</p><p>常用于：向 Bean 注入外部配置的属性、向 Bean 注入其他 Bean 的属性、条件装配 Bean、Spring Data JPA 语句等</p><h2 id="快速开始" tabindex="-1"><a class="header-anchor" href="#快速开始" aria-hidden="true">#</a> 快速开始</h2><div class="custom-container tip"><p class="custom-container-title">提示</p><p>文本示例基于 SpringBoot 注解方式，可自行了解 Spring XML 方式、编程方式</p></div><ol><li>新建一个 SpringBoot 项目，引入 Lombok 依赖（可选，只是简化代码）</li><li>创建 application.yml，内容如下：</li></ol><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">demo</span><span class="token punctuation">:</span>
  <span class="token key atrule">user01</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> xiaoso
    <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>新建类 User.java ，注册为 Spring bean</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">&quot;user01&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${demo.user01.name}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;#{ \${demo.user01.age} + 1}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>新建 SpringBoot 测试类，添加如下代码</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">class</span> <span class="token class-name">DemoApplicationTests</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;user01&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">User</span> user<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printUser01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>打印结果如下</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>User(name=xiaoso, age=1)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="spel-结构" tabindex="-1"><a class="header-anchor" href="#spel-结构" aria-hidden="true">#</a> SpEL 结构</h2><p>SpEL 运算表达式以 <code>#</code> 开头，内容在大括号中，格式为<code>#{表达式}</code></p><p>外部文件属性引用以 <code>$</code> 开头，内容在大括号中，格式为 <code>\${属性名}</code></p><h2 id="spel-基本运算" tabindex="-1"><a class="header-anchor" href="#spel-基本运算" aria-hidden="true">#</a> SpEL 基本运算</h2><table><thead><tr><th>类型</th><th>操作类型</th></tr></thead><tbody><tr><td>算数运算</td><td>+, -, *, /, %, ^, div, mod</td></tr><tr><td>关系运算</td><td>&lt;, &gt;, ==, !=, &lt;=, &gt;=, lt, gt, eq, ne, le, ge</td></tr><tr><td>逻辑运算</td><td>and, or, not, &amp;&amp;, ||, !</td></tr><tr><td>条件</td><td>?:</td></tr><tr><td>正则</td><td>matches</td></tr></tbody></table><h3 id="默认值" tabindex="-1"><a class="header-anchor" href="#默认值" aria-hidden="true">#</a> 默认值</h3><p><code>\${属性名:默认值}</code> 引用外部属性时，如果无外部属性，使用默认值</p><h3 id="算数运算" tabindex="-1"><a class="header-anchor" href="#算数运算" aria-hidden="true">#</a> 算数运算</h3><p>支持的操作类型包括 <code>+, -, *, /, %, ^, div, mod</code></p><p>一些简单例子如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;#{19 + 1}&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 20</span>
<span class="token keyword">private</span> <span class="token keyword">double</span> add<span class="token punctuation">;</span> 

<span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;#{&#39;String1 &#39; + &#39;string2&#39;}&quot;</span><span class="token punctuation">)</span> <span class="token comment">// &quot;String1 string2&quot;</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> addString<span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="关系运算" tabindex="-1"><a class="header-anchor" href="#关系运算" aria-hidden="true">#</a> 关系运算</h3><p>关系运算支持 <code>&lt;, &gt;, ==, !=, &lt;=, &gt;=, lt, gt, eq, ne, le, ge</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;#{1 == 1}&quot;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
<span class="token keyword">private</span> <span class="token keyword">boolean</span> equal<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;#{1 != 1}&quot;</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
<span class="token keyword">private</span> <span class="token keyword">boolean</span> notEqual<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="逻辑运算" tabindex="-1"><a class="header-anchor" href="#逻辑运算" aria-hidden="true">#</a> 逻辑运算</h3><p>逻辑运算支持 <code> and, or, not, &amp;&amp;, ||, !</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;#{250 &gt; 200 &amp;&amp; 200 &lt; 4000}&quot;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
<span class="token keyword">private</span> <span class="token keyword">boolean</span> and<span class="token punctuation">;</span> 

<span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;#{!true}&quot;</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
<span class="token keyword">private</span> <span class="token keyword">boolean</span> not<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="条件" tabindex="-1"><a class="header-anchor" href="#条件" aria-hidden="true">#</a> 条件</h3><p>条件运算其实就是三元表达式，格式为 <code>条件 ? 值 A : 值 B</code>。当<code>条件</code>为逻辑 <code>true</code>时，取<code>值 A</code>，否则取<code>值 B</code> 。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;#{2 &gt; 1 ? &#39;a&#39; : &#39;b&#39;}&quot;</span><span class="token punctuation">)</span> <span class="token comment">// &quot;a&quot;</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> ternary<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;#{someBean.someProperty != null ? someBean.someProperty : &#39;default&#39;}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> ternary<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="正则" tabindex="-1"><a class="header-anchor" href="#正则" aria-hidden="true">#</a> 正则</h3><p>支持 <code>match</code> 运算符，用于检查字符串和正则是否匹配</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;#{&#39;100&#39; matches &#39;\\\\d+&#39; }&quot;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
<span class="token keyword">private</span> <span class="token keyword">boolean</span> validNumericStringResult<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;#{&#39;100fghdjf&#39; matches &#39;\\\\d+&#39; }&quot;</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
<span class="token keyword">private</span> <span class="token keyword">boolean</span> invalidNumericStringResult<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="spel-访问" tabindex="-1"><a class="header-anchor" href="#spel-访问" aria-hidden="true">#</a> SpEL 访问</h2><p>SpEL 可以访问集合、也可以访问的 Bean 的内容</p><h3 id="集合" tabindex="-1"><a class="header-anchor" href="#集合" aria-hidden="true">#</a> 集合</h3><p><strong>引用整个集合</strong></p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>这部分是引用外部文件，不是 SpEL 内容，但和 SpEL 常做配合使用，故作介绍</p></div><p>在 application.yaml 中加入如下内容：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">demo02</span><span class="token punctuation">:</span>
  <span class="token key atrule">numList</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">注意</p><p>在 yaml 文件中，list 可以写成如下形式，但 spring 不支持这种格式的 list 解析</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">demo02</span><span class="token punctuation">:</span>
  <span class="token key atrule">numList</span><span class="token punctuation">:</span> 
    <span class="token punctuation">-</span> <span class="token number">1</span>
    <span class="token punctuation">-</span> <span class="token number">2</span>
    <span class="token punctuation">-</span> <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${demo02.numList}&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 1,2,3</span>
<span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> nums<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="map" tabindex="-1"><a class="header-anchor" href="#map" aria-hidden="true">#</a> Map</h3><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">temp</span><span class="token punctuation">:</span>
  <span class="token key atrule">map</span><span class="token punctuation">:</span> <span class="token string">&#39;{&quot;1&quot;: &quot;11&quot;,&quot;2&quot;: &quot;22&quot;}&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;#{\${temp.map:{}}}&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> config<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="spring-上下文-bean" tabindex="-1"><a class="header-anchor" href="#spring-上下文-bean" aria-hidden="true">#</a> Spring 上下文 Bean</h3><h4 id="访问属性" tabindex="-1"><a class="header-anchor" href="#访问属性" aria-hidden="true">#</a> 访问属性</h4><p>注册一个 Bean</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">&quot;myInfo&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Info</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;xiaoso&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">注意</p><p>被引用 list、map 访问权限应为 public，或者有 getter 方法</p></div><p>在别的 Bean 引用该 myInfo 这个 bean 的属性一些例子如下：</p><ul><li>引用整个 list</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;#{myInfo.list}&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 1,2</span>
<span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>引用 list 下标为 1 的元素</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;#{myInfo.list[1]}&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 2</span>
<span class="token keyword">private</span> <span class="token class-name">Integer</span> numIndex1<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>引用 map 中，key 为 name 的 value</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;#{myInfo.map[&#39;name&#39;]}&quot;</span><span class="token punctuation">)</span> <span class="token comment">// xiaoso</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="调用方法" tabindex="-1"><a class="header-anchor" href="#调用方法" aria-hidden="true">#</a> 调用方法</h4><p>注册一个 Bean</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">&quot;myInfo&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Info</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getInfoTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;震惊！&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用属性 <code>list</code> 的<code>size()</code>方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;#{myInfo.list.size()}&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 2</span>
<span class="token keyword">private</span> <span class="token class-name">Integer</span> size<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>调用 Bean <code>myInfo</code> 的 <code>getInfoTitle()</code> 方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;#{myInfo.getInfoTitle()}&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 震惊！</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="类方法和类变量" tabindex="-1"><a class="header-anchor" href="#类方法和类变量" aria-hidden="true">#</a> 类方法和类变量</h4><p>新建一个静态类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoUtils</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">DEMO</span> <span class="token operator">=</span> <span class="token string">&quot;demo&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;demo&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用类静态变量</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;#{T(com.github.xiaoso456.demo.entity.DemoUtils).DEMO}&quot;</span><span class="token punctuation">)</span> <span class="token comment">// demo</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> staticVar<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>调用类的静态方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;#{T(com.github.xiaoso456.demo.entity.DemoUtils).getDemo()}&quot;</span><span class="token punctuation">)</span> <span class="token comment">// demo</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> staticFunc<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,75),d={href:"https://www.baeldung.com/spring-expression-language",target:"_blank",rel:"noopener noreferrer"};function r(k,v){const a=e("ExternalLinkIcon");return t(),p("div",null,[u,n("p",null,[n("a",d,[o("Spring Expression Language Guide | Baeldung"),i(a)])])])}const b=s(l,[["render",r],["__file","SpEL.html.vue"]]);export{b as default};
