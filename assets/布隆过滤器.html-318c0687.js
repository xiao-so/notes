import{_ as e,r as p,o,c,a as n,b as a,d as t,e as i}from"./app-9157d7b3.js";const l="/notes/assets/image-20230625163502094-c40e5e01.png",u={},r=i('<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p>布隆过滤器（Bloom Filter）是一种高效的数据结构，通过位数组和多个哈希函数实现，用于检索给定元素是否在一个集合中，适用于海量数据的去重、缓存穿透等场景。</p><p>布隆过滤器特点：</p><ul><li>如果一个元素在集合中，布隆过滤器能能够检测到</li><li>如果一个元素不在集合中，可能会被布隆过滤器认为在集合中，会有误判</li></ul><p>布隆过滤器添加元素：</p><ol><li>对添加元素应用 k 个哈希函数</li><li>得到对应数组 k 个位置</li><li>把这些位置的值置为 1</li></ol><p>布隆过滤器查询元素：</p><ol><li>对查询元素应用 k 个哈希函数</li><li>得到对应数组 k 个位置</li><li>如果这些位置都为 1，则认为元素存在</li></ol><p>减少布隆过滤器误判：</p><ul><li>增加二进制位数</li><li>增加 hash 次数</li></ul><h2 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景" aria-hidden="true">#</a> 使用场景</h2><p>布隆过滤器使用：</p><ul><li><p>添加新数据，会把数据 key 添加到布隆过滤器</p></li><li><p>删除数据，布隆过滤器无法直接处理，一般使用以下方式解决：</p><ul><li>定时异步重建布隆过滤器</li><li>使用计数布隆过滤器，标记每个位的使用次数</li></ul></li></ul><h3 id="防止缓存穿透" tabindex="-1"><a class="header-anchor" href="#防止缓存穿透" aria-hidden="true">#</a> 防止缓存穿透</h3><p>缓存穿透：查询 redis 无数据，去数据库查询，且很有可能数据库也没有该数据</p><p>流程：查询 redis 前，使用布隆过滤器判断是否有数据，如果没有直接返回错误。如果有，优先读取 redis 数据，redis 数据不存在时，读取数据库数据并载入缓存。</p><p><img src="'+l+`" alt="image-20230625163502094"></p><h3 id="去重" tabindex="-1"><a class="header-anchor" href="#去重" aria-hidden="true">#</a> 去重</h3><p>使用布隆过滤器处理要去重的元素，有以下结论</p><ul><li>如果元素重复，一定会被检测到认为重复</li><li>如果元素不重复，可能会被检测到认为重复</li></ul><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h2><h3 id="java-redis-使用-redisson-客户端" tabindex="-1"><a class="header-anchor" href="#java-redis-使用-redisson-客户端" aria-hidden="true">#</a> Java Redis 使用 Redisson 客户端</h3><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.redisson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>redisson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.6.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedissonBloomFilter</span> <span class="token punctuation">{</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Config</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    config<span class="token punctuation">.</span><span class="token function">useSingleServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">&quot;redis://192.168.14.104:6379&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    config<span class="token punctuation">.</span><span class="token function">useSingleServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//构造 Redisson</span>
    <span class="token class-name">RedissonClient</span> redisson <span class="token operator">=</span> <span class="token class-name">Redisson</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">RBloomFilter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> bloomFilter <span class="token operator">=</span> redisson<span class="token punctuation">.</span><span class="token function">getBloomFilter</span><span class="token punctuation">(</span><span class="token string">&quot;phoneList&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//初始化布隆过滤器：预计元素为 100000000L,误差率为 3%</span>
    bloomFilter<span class="token punctuation">.</span><span class="token function">tryInit</span><span class="token punctuation">(</span><span class="token number">100000000L</span><span class="token punctuation">,</span><span class="token number">0.03</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//将号码 10086 插入到布隆过滤器中</span>
    bloomFilter<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;10086&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//判断下面号码是否在布隆过滤器中</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bloomFilter<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bloomFilter<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;10086&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,25),d={href:"https://www.bilibili.com/video/BV1eU4y1J7GY/?spm_id_from=333.999.0.0&vd_source=a7294b5d53441a33f427f8cd4d5333c2",target:"_blank",rel:"noopener noreferrer"},k={href:"https://blog.csdn.net/weixin_39724194/article/details/127430887",target:"_blank",rel:"noopener noreferrer"};function m(v,g){const s=p("ExternalLinkIcon");return o(),c("div",null,[r,n("p",null,[n("a",d,[a("【IT 老齐 008】布隆过滤器在亿级流量电商系统的应用_哔哩哔哩_bilibili"),t(s)])]),n("p",null,[n("a",k,[a("Redis(十八) -- 布隆过滤器_redisson 布隆过滤器_leo_messi94 的博客-CSDN 博客 "),t(s)])])])}const b=e(u,[["render",m],["__file","布隆过滤器.html.vue"]]);export{b as default};
